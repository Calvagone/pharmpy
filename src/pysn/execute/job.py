# -*- encoding: utf-8 -*-
"""
============
Executed Job
============

A job unit.

Contains process for non-blocking communication.

.. note::
    Generated by :class:`~pysn.execute.engine.Engine` implementation and already started before
    external API access gets object.

Definitions
-----------
"""

import asyncio
import locale
import os
from asyncio.subprocess import PIPE
from contextlib import closing
from queue import Empty
from queue import Queue


class AsyncProcess:
    """An asynchronous process."""

    stdout = list()
    stdout_queue = Queue()
    running = False

    def __init__(self, loop, command, cwd):
        self.loop = loop
        self.command = command
        self.cwd = command

    def run(self):
        with closing(self.loop):
            self.loop.run_until_complete(self._async_exec())

    def iter_stdout(self, block=False):
        while self.running:
            try:
                if block:
                    line = self.stdout_queue.get_nowait()
                else:
                    line = self.stdout_queue.get(block=True)
            except Empty:
                return None
            if line is not None:
                self.stdout += [line]
                yield line

    async def _async_exec(self):
        # ref: https://stackoverflow.com/a/20697159
        proc = await asyncio.create_subprocess_exec(
            self.command, stdout=PIPE, cwd=self.cwd
        )
        self.running = True
        async for line in proc.stdout:
            decoded_line = line.decode(locale.getpreferredencoding(False))
            self.stdout_queue.put(decoded_line)
        return await proc.wait()


class Job:
    """A job of an Engine (running in an Environment)."""

    def __init__(self, command, cwd):
        if os.name == 'nt':
            loop = asyncio.ProactorEventLoop()
            asyncio.set_event_loop(self.loop)
        else:
            loop = asyncio.get_event_loop()
        self.process = AsyncProcess(loop, command, cwd)
        self.process.run()

    @property
    def running(self):
        """True if job is still running."""
        return self.process.running

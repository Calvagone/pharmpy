root : WS_ALL assignment

assignment: variable [WS] "=" [WS] expression [WS_ALL]

// A precedence climbing grammar

expression: term (add_op [WS] term)*
?term: factor (mul_op factor)* -> expression
?factor: _atom -> expression
       | power
?power: _atom ("**" factor)?

add_op: "+" -> operator
      | "-" -> operator
mul_op: "*" -> operator
      | "/" -> operator
 

_atom: [WS] (func | symbol | number | "(" expression ")") [WS]

func: intrinsic_func "(" expression ")"

intrinsic_func: "LOG" | "LOG10" | "EXP" | "SQRT" | "SIN" | "COS"

variable: NAME

symbol: parameter | NAME

parameter: (THETA | ETA | EPS | OMEGA | SIGMA) subscript
         | (OMEGA | SIGMA) double_subscript

subscript: [WS] "(" [WS] INTEGER [WS] ")"
double_subscript: [WS] "(" [WS] INTEGER [WS] "," [WS] INTEGER [WS] ")"

number: INTEGER | FLOAT

NAME: /[A-Za-z_]\w*/

INTEGER: /[-+]?\d+/
FLOAT: /[-+]?((\d+\.\d*|\.\d+)([ed][-+]?\d+)?|\d+([ed][-+]?\d+))/i
THETA: "THETA"
ETA: "ETA"
EPS: "EPS" | "ERR"
OMEGA: "OMEGA"
SIGMA: "SIGMA"

WS: (" " | /\t/)+
WS_ALL: /\s+/

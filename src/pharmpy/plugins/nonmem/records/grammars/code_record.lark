root : WS_ALL assignment

assignment: variable [WS] "=" [WS] expression [WS_ALL]

// A precedence climbing grammar

expression: term (add_op [WS] term)*
?term: factor (mul_op factor)* -> expression
?factor: _atom -> expression

add_op: "+" -> operator
      | "-" -> operator
mul_op: "*" -> operator
      | "/" -> operator
 

_atom: [WS] (symbol | number | "(" expression ")") [WS]
variable: NAME

//operator: PLUS | MINUS | MUL | DIV
//PLUS: "+"
//MINUS: "-"
//MUL: "*"
//DIV: "/"

symbol: parameter | NAME

parameter: (THETA | ETA | EPS | OMEGA | SIGMA) subscript
         | (OMEGA | SIGMA) double_subscript

subscript: [WS] "(" [WS] INTEGER [WS] ")"
double_subscript: [WS] "(" [WS] INTEGER [WS] "," [WS] INTEGER [WS] ")"

number: INTEGER

NAME: /[A-Za-z_]\w*/

INTEGER: /\d+/
THETA: "THETA"
ETA: "ETA"
EPS: "EPS" | "ERR"
OMEGA: "OMEGA"
SIGMA: "SIGMA"

WS: (" " | /\t/)+
WS_ALL: /\s+/
